pipeline {
    options {
        skipDefaultCheckout()
        timestamps()
    }
    agent {
        node { label 'aicp-smartgraph' }
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: '')
        string(name: 'ENVIRONMENT', defaultValue: 'ci', description: 'Role Name (mandatory)')
    }
    environment {
        PROJECT_NAME = 'smartgraph'
        INIT_TOKEN   = credentials('vault-access')                                   // OIDC provider this token is Auto Generated //
        SPHINX_TOKEN = credentials('ncatssvcdvops-sphinx')                           // PatToken Read Only Access for the DevOps Artifacts Repo https://github.com/Sphinx-Automation/devops-pipeline-artifacts.git //
        ROLE_NAME    = "$ENVIRONMENT-$PROJECT_NAME"
        APP_TYPE     = "ui"
        ENVIRONMENT = 'ci'
        ENV = 'ci' 
    }
    stages {
        stage('Docker/NpmJs Secrets By Role') {
            steps {
                cleanWs()
                checkout scm
                script {
                sh '''
                    ### Cloning the repo from DevOps Artifacts Repository Repo ###
                    git clone https://$SPHINX_TOKEN@github.com/Sphinx-Automation/devops-pipeline-artifacts.git
                    
                    ###  Running the script with Env specific to Authenticate Vault & Get Application Secrets for Docker & NpmJS Token###
                    cd devops-pipeline-artifacts/application && /bin/bash getDockerHubSecretsByRole.sh && /bin/bash getNpmJsSecretsByRole.sh
                    '''
                }
            }
        }
        stage('Build Version'){
            when { expression { return !params.BUILD_VERSION } }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Build image') {
            when { expression { return env.BUILD == 'true' }}
            steps {
            // Passing Varibles prepare.sh to retrive NPMJS TOKEN & DOCKER AUTHENTICATION //
                configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh') 
                ]){
                script {
                    withEnv([
                            "DOCKER_REPO_NAME=ncats/smartgraph_frontend",
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                    ]){
                        sh '''#!/bin/bash
                            source prepare.sh
                            docker login https://index.docker.io/v1/ -u "${DOCKERLOGIN}" -p "${DOCKERPASSWORD}"
                            docker build --no-cache -f ./Dockerfile --build-arg ENV=ci --build-arg NPM_TOKEN=${NPMTOKEN} --build-arg BUILD_VERSION=${BUILD_VERSION} -t ${DOCKER_REPO_NAME} .
                            docker tag ${DOCKER_REPO_NAME}:latest ${DOCKER_REPO_NAME}:${BUILD_VERSION}
                            docker push ${DOCKER_REPO_NAME}:${BUILD_VERSION}
                           '''
                            }
                        }
                }
            }
        }
        stage('deploy docker') {
            agent {
                node { label 'aicp-smartgraph'}
            }
            steps {
                cleanWs()
                checkout scm
                // Passing Varibles prepare.sh to retrive NPMJS TOKEN & DOCKER AUTHENTICATION //
                configFileProvider(
                [configFile(fileId: 'aicp-smartgraph-ui-docker-compose-ci.yml', targetLocation: 'docker-compose.yml'),
                 configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')]) {
                    withEnv([
                            "PROJECT_NAME=smartgraph",
                            "ENVIRONMENT=ci",
                            "ENV=ci",
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION),                          
                            "ROLE_NAME=$ENV-$PROJECT_NAME",
                            "APP_TYPE=ui",
                            "DOCKER_REPO_NAME=ncats/smartgraph_frontend"
                        ]) {
                    script {
                        sh '''#!/bin/bash
                            source prepare.sh
                            docker login https://index.docker.io/v1/ -u "${DOCKERLOGIN}" -p "${DOCKERPASSWORD}"
                            docker-compose -p $PROJECT_NAME down -v --rmi all | xargs echo
                            docker pull $DOCKER_REPO_NAME:$BUILD_VERSION
                            docker rmi $DOCKER_REPO_NAME:current | xargs echo
                            docker tag $DOCKER_REPO_NAME:$BUILD_VERSION $DOCKER_REPO_NAME:current

                            docker-compose -p $PROJECT_NAME up -d
                            docker exec -i smartgraph_smartgraph-ui_1 sh -c "chmod 666 /usr/share/nginx/html/assets.config.json"
                            docker start nginx-gen | xargs echo
                            docker rmi \$(docker images -aq) | xargs echo

                            '''
                        }
                    }
                }
            }
            post {
               always {
                    echo " Clean up the workspace in deploy node!"
                    //cleanWs()
                }
            }
        }
    }
}
